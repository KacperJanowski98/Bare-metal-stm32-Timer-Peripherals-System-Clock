
Bare_metal_F4_Timer_System_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b4  080004bc  000104bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b4  080004b4  000104bc  2**0
                  CONTENTS
  4 .ARM          00000000  080004b4  080004b4  000104bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b4  080004bc  000104bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b4  080004b4  000104b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b8  080004b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004bc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004bc  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012ff  00000000  00000000  000104ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003e4  00000000  00000000  000117eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00011bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00011c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018266  00000000  00000000  00011cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001003  00000000  00000000  00029f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ed9  00000000  00000000  0002af41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b2e1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000138  00000000  00000000  000b2e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800049c 	.word	0x0800049c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800049c 	.word	0x0800049c

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4907      	ldr	r1, [pc, #28]	; (8000220 <__NVIC_EnableIRQ+0x38>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100

08000224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	db0a      	blt.n	800024e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2da      	uxtb	r2, r3
 800023c:	490c      	ldr	r1, [pc, #48]	; (8000270 <__NVIC_SetPriority+0x4c>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	0112      	lsls	r2, r2, #4
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	440b      	add	r3, r1
 8000248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800024c:	e00a      	b.n	8000264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4908      	ldr	r1, [pc, #32]	; (8000274 <__NVIC_SetPriority+0x50>)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3b04      	subs	r3, #4
 800025c:	0112      	lsls	r2, r2, #4
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	440b      	add	r3, r1
 8000262:	761a      	strb	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	e000e100 	.word	0xe000e100
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <main>:
 */

#include "main.h"

int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// Initial clock setup

    FLASH->ACR &= ~(0x00000017);
 800027c:	4b38      	ldr	r3, [pc, #224]	; (8000360 <main+0xe8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a37      	ldr	r2, [pc, #220]	; (8000360 <main+0xe8>)
 8000282:	f023 0317 	bic.w	r3, r3, #23
 8000286:	6013      	str	r3, [r2, #0]
    FLASH->ACR |=  (FLASH_ACR_LATENCY | FLASH_ACR_PRFTEN);
 8000288:	4b35      	ldr	r3, [pc, #212]	; (8000360 <main+0xe8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a34      	ldr	r2, [pc, #208]	; (8000360 <main+0xe8>)
 800028e:	f443 7383 	orr.w	r3, r3, #262	; 0x106
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6013      	str	r3, [r2, #0]

    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_MCO1PRE);
 8000298:	4b32      	ldr	r3, [pc, #200]	; (8000364 <main+0xec>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a31      	ldr	r2, [pc, #196]	; (8000364 <main+0xec>)
 800029e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002a6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2 | RCC_CFGR_RTCPRE_4);
 80002a8:	4b2e      	ldr	r3, [pc, #184]	; (8000364 <main+0xec>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a2d      	ldr	r2, [pc, #180]	; (8000364 <main+0xec>)
 80002ae:	f043 6382 	orr.w	r3, r3, #68157440	; 0x4100000
 80002b2:	6093      	str	r3, [r2, #8]
    // Turn the PLL on and wait for it to be ready.
    RCC->CR |=  (RCC_CR_PLLON);
 80002b4:	4b2b      	ldr	r3, [pc, #172]	; (8000364 <main+0xec>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a2a      	ldr	r2, [pc, #168]	; (8000364 <main+0xec>)
 80002ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002be:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY)) {};
 80002c0:	bf00      	nop
 80002c2:	4b28      	ldr	r3, [pc, #160]	; (8000364 <main+0xec>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <main+0x4a>
    // Select the PLL as the system clock source.
    RCC->CFGR &= ~(RCC_CFGR_SW);
 80002ce:	4b25      	ldr	r3, [pc, #148]	; (8000364 <main+0xec>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a24      	ldr	r2, [pc, #144]	; (8000364 <main+0xec>)
 80002d4:	f023 0303 	bic.w	r3, r3, #3
 80002d8:	6093      	str	r3, [r2, #8]
    RCC->CFGR |=  (RCC_CFGR_SW_PLL);
 80002da:	4b22      	ldr	r3, [pc, #136]	; (8000364 <main+0xec>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	4a21      	ldr	r2, [pc, #132]	; (8000364 <main+0xec>)
 80002e0:	f043 0302 	orr.w	r3, r3, #2
 80002e4:	6093      	str	r3, [r2, #8]
    while (!(RCC->CFGR & RCC_CFGR_SWS_PLL)) {};
 80002e6:	bf00      	nop
 80002e8:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <main+0xec>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f003 0308 	and.w	r3, r3, #8
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <main+0x70>
    // Set the global clock speed variable.
    core_clock_hz = 48000000;
 80002f4:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <main+0xf0>)
 80002f6:	4a1d      	ldr	r2, [pc, #116]	; (800036c <main+0xf4>)
 80002f8:	601a      	str	r2, [r3, #0]

    // Enable the GPIOD clock
    RCC->AHB1ENR |=  RCC_AHB1ENR_GPIODEN;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <main+0xec>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <main+0xec>)
 8000300:	f043 0308 	orr.w	r3, r3, #8
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
    // Enable the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM12EN;
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <main+0xec>)
 8000308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030a:	4a16      	ldr	r2, [pc, #88]	; (8000364 <main+0xec>)
 800030c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000310:	6413      	str	r3, [r2, #64]	; 0x40

    // Setup GPIO pin D12
    GPIOD->MODER &= ~(0x3 << (LED_PIN*2));
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <main+0xf8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a16      	ldr	r2, [pc, #88]	; (8000370 <main+0xf8>)
 8000318:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800031c:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (0x1 << (LED_PIN*2));
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <main+0xf8>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a13      	ldr	r2, [pc, #76]	; (8000370 <main+0xf8>)
 8000324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000328:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~(0x1 << LED_PIN);
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <main+0xf8>)
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	4a10      	ldr	r2, [pc, #64]	; (8000370 <main+0xf8>)
 8000330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000334:	6053      	str	r3, [r2, #4]
    GPIOD->PUPDR &= ~(0x3 << (LED_PIN*2));
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <main+0xf8>)
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <main+0xf8>)
 800033c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000340:	60d3      	str	r3, [r2, #12]

    // Enable the NVIC interrupt for TIM2.
    // (Timer peripheral initialized and used elsewhere)
    NVIC_SetPriority(TIM2_IRQn, 0x03);
 8000342:	2103      	movs	r1, #3
 8000344:	201c      	movs	r0, #28
 8000346:	f7ff ff6d 	bl	8000224 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 800034a:	201c      	movs	r0, #28
 800034c:	f7ff ff4c 	bl	80001e8 <__NVIC_EnableIRQ>
    // Start the timer.
    start_timer(TIM2, 1000);
 8000350:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000354:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000358:	f000 f80c 	bl	8000374 <start_timer>

	while(1)
 800035c:	e7fe      	b.n	800035c <main+0xe4>
 800035e:	bf00      	nop
 8000360:	40023c00 	.word	0x40023c00
 8000364:	40023800 	.word	0x40023800
 8000368:	2000001c 	.word	0x2000001c
 800036c:	02dc6c00 	.word	0x02dc6c00
 8000370:	40020c00 	.word	0x40020c00

08000374 <start_timer>:
#include "peripherals.h"

/**
 * Start basic timer
 */
void start_timer(TIM_TypeDef *TIMx, uint16_t ms) {
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	807b      	strh	r3, [r7, #2]
	// Start by making sure the timer's counter is off
	TIMx->CR1 &= ~(TIM_CR1_CEN);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f023 0201 	bic.w	r2, r3, #1
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	601a      	str	r2, [r3, #0]
	// Reset the peripheral
	if (TIMx == TIM2) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000392:	d10b      	bne.n	80003ac <start_timer+0x38>
		RCC->APB1RSTR |= (RCC_APB1RSTR_TIM2RST);
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <start_timer+0x80>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <start_timer+0x80>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST);
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <start_timer+0x80>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <start_timer+0x80>)
 80003a6:	f023 0301 	bic.w	r3, r3, #1
 80003aa:	6213      	str	r3, [r2, #32]
	}
	// Set the timer prescaler/autoreload timing registers
	TIMx->PSC = core_clock_hz / 1000;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <start_timer+0x84>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a12      	ldr	r2, [pc, #72]	; (80003fc <start_timer+0x88>)
 80003b2:	fba2 2303 	umull	r2, r3, r2, r3
 80003b6:	099a      	lsrs	r2, r3, #6
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->ARR = ms;
 80003bc:	887a      	ldrh	r2, [r7, #2]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	62da      	str	r2, [r3, #44]	; 0x2c
	// Send an update event to reset the timer and apply settings
	TIMx->EGR |= TIM_EGR_UG;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f043 0201 	orr.w	r2, r3, #1
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	615a      	str	r2, [r3, #20]
	// Enable the hardware interrupt
	TIMx->DIER |= TIM_DIER_UIE;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	f043 0201 	orr.w	r2, r3, #1
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	60da      	str	r2, [r3, #12]
	// Enable the timer
	TIMx->CR1 |= TIM_CR1_CEN;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 0201 	orr.w	r2, r3, #1
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	601a      	str	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40023800 	.word	0x40023800
 80003f8:	2000001c 	.word	0x2000001c
 80003fc:	10624dd3 	.word	0x10624dd3

08000400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000402:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000404:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <LoopForever+0x6>)
  ldr r1, =_edata
 800040a:	490d      	ldr	r1, [pc, #52]	; (8000440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800040c:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <LoopForever+0xe>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000420:	4c0a      	ldr	r4, [pc, #40]	; (800044c <LoopForever+0x16>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042e:	f000 f811 	bl	8000454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000432:	f7ff ff21 	bl	8000278 <main>

08000436 <LoopForever>:

LoopForever:
    b LoopForever
 8000436:	e7fe      	b.n	8000436 <LoopForever>
  ldr   r0, =_estack
 8000438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000444:	080004bc 	.word	0x080004bc
  ldr r2, =_sbss
 8000448:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800044c:	20000020 	.word	0x20000020

08000450 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC_IRQHandler>
	...

08000454 <__libc_init_array>:
 8000454:	b570      	push	{r4, r5, r6, lr}
 8000456:	4d0d      	ldr	r5, [pc, #52]	; (800048c <__libc_init_array+0x38>)
 8000458:	4c0d      	ldr	r4, [pc, #52]	; (8000490 <__libc_init_array+0x3c>)
 800045a:	1b64      	subs	r4, r4, r5
 800045c:	10a4      	asrs	r4, r4, #2
 800045e:	2600      	movs	r6, #0
 8000460:	42a6      	cmp	r6, r4
 8000462:	d109      	bne.n	8000478 <__libc_init_array+0x24>
 8000464:	4d0b      	ldr	r5, [pc, #44]	; (8000494 <__libc_init_array+0x40>)
 8000466:	4c0c      	ldr	r4, [pc, #48]	; (8000498 <__libc_init_array+0x44>)
 8000468:	f000 f818 	bl	800049c <_init>
 800046c:	1b64      	subs	r4, r4, r5
 800046e:	10a4      	asrs	r4, r4, #2
 8000470:	2600      	movs	r6, #0
 8000472:	42a6      	cmp	r6, r4
 8000474:	d105      	bne.n	8000482 <__libc_init_array+0x2e>
 8000476:	bd70      	pop	{r4, r5, r6, pc}
 8000478:	f855 3b04 	ldr.w	r3, [r5], #4
 800047c:	4798      	blx	r3
 800047e:	3601      	adds	r6, #1
 8000480:	e7ee      	b.n	8000460 <__libc_init_array+0xc>
 8000482:	f855 3b04 	ldr.w	r3, [r5], #4
 8000486:	4798      	blx	r3
 8000488:	3601      	adds	r6, #1
 800048a:	e7f2      	b.n	8000472 <__libc_init_array+0x1e>
 800048c:	080004b4 	.word	0x080004b4
 8000490:	080004b4 	.word	0x080004b4
 8000494:	080004b4 	.word	0x080004b4
 8000498:	080004b8 	.word	0x080004b8

0800049c <_init>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr

080004a8 <_fini>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr
